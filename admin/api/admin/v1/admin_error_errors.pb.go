// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 401
func IsNotLoggedIn(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AdminErrorReason_NOT_LOGGED_IN.String() && e.Code == 401
}

// 401
func ErrorNotLoggedIn(format string, args ...interface{}) *errors.Error {
	return errors.New(401, AdminErrorReason_NOT_LOGGED_IN.String(), fmt.Sprintf(format, args...))
}

// 403
func IsAccessForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AdminErrorReason_ACCESS_FORBIDDEN.String() && e.Code == 403
}

// 403
func ErrorAccessForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, AdminErrorReason_ACCESS_FORBIDDEN.String(), fmt.Sprintf(format, args...))
}

// 404
func IsResourceNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AdminErrorReason_RESOURCE_NOT_FOUND.String() && e.Code == 404
}

// 404
func ErrorResourceNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, AdminErrorReason_RESOURCE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 405
func IsMethodNotAllowed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AdminErrorReason_METHOD_NOT_ALLOWED.String() && e.Code == 405
}

// 405
func ErrorMethodNotAllowed(format string, args ...interface{}) *errors.Error {
	return errors.New(405, AdminErrorReason_METHOD_NOT_ALLOWED.String(), fmt.Sprintf(format, args...))
}

// 408
func IsRequestTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AdminErrorReason_REQUEST_TIMEOUT.String() && e.Code == 408
}

// 408
func ErrorRequestTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(408, AdminErrorReason_REQUEST_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

// 500
func IsInternalServerError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AdminErrorReason_INTERNAL_SERVER_ERROR.String() && e.Code == 500
}

// 500
func ErrorInternalServerError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AdminErrorReason_INTERNAL_SERVER_ERROR.String(), fmt.Sprintf(format, args...))
}

// 501
func IsNotImplemented(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AdminErrorReason_NOT_IMPLEMENTED.String() && e.Code == 501
}

// 501
func ErrorNotImplemented(format string, args ...interface{}) *errors.Error {
	return errors.New(501, AdminErrorReason_NOT_IMPLEMENTED.String(), fmt.Sprintf(format, args...))
}

// 502
func IsNetworkError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AdminErrorReason_NETWORK_ERROR.String() && e.Code == 502
}

// 502
func ErrorNetworkError(format string, args ...interface{}) *errors.Error {
	return errors.New(502, AdminErrorReason_NETWORK_ERROR.String(), fmt.Sprintf(format, args...))
}

// 503
func IsServiceUnavailable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AdminErrorReason_SERVICE_UNAVAILABLE.String() && e.Code == 503
}

// 503
func ErrorServiceUnavailable(format string, args ...interface{}) *errors.Error {
	return errors.New(503, AdminErrorReason_SERVICE_UNAVAILABLE.String(), fmt.Sprintf(format, args...))
}

// 504
func IsNetworkTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AdminErrorReason_NETWORK_TIMEOUT.String() && e.Code == 504
}

// 504
func ErrorNetworkTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(504, AdminErrorReason_NETWORK_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

// 505
func IsRequestNotSupport(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AdminErrorReason_REQUEST_NOT_SUPPORT.String() && e.Code == 505
}

// 505
func ErrorRequestNotSupport(format string, args ...interface{}) *errors.Error {
	return errors.New(505, AdminErrorReason_REQUEST_NOT_SUPPORT.String(), fmt.Sprintf(format, args...))
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AdminErrorReason_USER_NOT_FOUND.String() && e.Code == 600
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(600, AdminErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}
