// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/soraQaQ/blog/app/admin/internal/biz"
	"github.com/soraQaQ/blog/app/admin/internal/conf"
	"github.com/soraQaQ/blog/app/admin/internal/data"
	"github.com/soraQaQ/blog/app/admin/internal/server"
	"github.com/soraQaQ/blog/app/admin/internal/service"
	"go.opentelemetry.io/otel/sdk/trace"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, auth *conf.Auth, logger log.Logger, tracerProvider *trace.TracerProvider, registry *conf.Registry) (*kratos.App, func(), error) {
	discovery := data.NewDiscovery(registry)
	articleServiceClient := data.NewArticleServiceClient(discovery, tracerProvider)
	userServiceClient := data.NewUserServiceClient(discovery, tracerProvider)
	dataData, err := data.NewData(articleServiceClient, userServiceClient, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	userUseCase := biz.NewUserUseCase(userRepo, logger)
	articleRepo := data.NewArticleRepo(dataData, logger)
	articleUsecase := biz.NewArticleUsecase(articleRepo, logger)
	adminService := service.NewAdminService(logger, auth, userUseCase, articleUsecase)
	httpServer := server.NewHTTPServer(confServer, auth, adminService, logger, tracerProvider)
	app := newApp(logger, httpServer)
	return app, func() {
	}, nil
}
