// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 未知错误
func IsUnknownError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ArticleErrorReason_UNKNOWN_ERROR.String() && e.Code == 500
}

// 未知错误
func ErrorUnknownError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ArticleErrorReason_UNKNOWN_ERROR.String(), fmt.Sprintf(format, args...))
}

// 文章不存在 - 使用 404 错误码
func IsArticleNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ArticleErrorReason_ARTICLE_NOT_FOUND.String() && e.Code == 404
}

// 文章不存在 - 使用 404 错误码
func ErrorArticleNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ArticleErrorReason_ARTICLE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 文章格式错误 - 使用 400 错误码
func IsArticleInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ArticleErrorReason_ARTICLE_INVALID.String() && e.Code == 400
}

// 文章格式错误 - 使用 400 错误码
func ErrorArticleInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ArticleErrorReason_ARTICLE_INVALID.String(), fmt.Sprintf(format, args...))
}

// 标签不能为空 - 使用 400 错误码
func IsEmptyTag(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ArticleErrorReason_EMPTY_TAG.String() && e.Code == 400
}

// 标签不能为空 - 使用 400 错误码
func ErrorEmptyTag(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ArticleErrorReason_EMPTY_TAG.String(), fmt.Sprintf(format, args...))
}

// 无效的文章ID - 使用 400 错误码
func IsInvalidId(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ArticleErrorReason_INVALID_ID.String() && e.Code == 400
}

// 无效的文章ID - 使用 400 错误码
func ErrorInvalidId(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ArticleErrorReason_INVALID_ID.String(), fmt.Sprintf(format, args...))
}

// 文章标题不能为空 - 使用 400 错误码
func IsEmptyTitle(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ArticleErrorReason_EMPTY_TITLE.String() && e.Code == 400
}

// 文章标题不能为空 - 使用 400 错误码
func ErrorEmptyTitle(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ArticleErrorReason_EMPTY_TITLE.String(), fmt.Sprintf(format, args...))
}

// 文章摘要不能为空 - 使用 400 错误码
func IsEmptySummary(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ArticleErrorReason_EMPTY_SUMMARY.String() && e.Code == 400
}

// 文章摘要不能为空 - 使用 400 错误码
func ErrorEmptySummary(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ArticleErrorReason_EMPTY_SUMMARY.String(), fmt.Sprintf(format, args...))
}

// 文章内容URL不能为空 - 使用 400 错误码
func IsEmptyContentUrl(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ArticleErrorReason_EMPTY_CONTENT_URL.String() && e.Code == 400
}

// 文章内容URL不能为空 - 使用 400 错误码
func ErrorEmptyContentUrl(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ArticleErrorReason_EMPTY_CONTENT_URL.String(), fmt.Sprintf(format, args...))
}

// 文章对象不能为空 - 使用 400 错误码
func IsArticleNil(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ArticleErrorReason_ARTICLE_NIL.String() && e.Code == 400
}

// 文章对象不能为空 - 使用 400 错误码
func ErrorArticleNil(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ArticleErrorReason_ARTICLE_NIL.String(), fmt.Sprintf(format, args...))
}

// ID错误 - 使用 400 错误码
func IsArticleIdInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ArticleErrorReason_ARTICLE_ID_INVALID.String() && e.Code == 400
}

// ID错误 - 使用 400 错误码
func ErrorArticleIdInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ArticleErrorReason_ARTICLE_ID_INVALID.String(), fmt.Sprintf(format, args...))
}
